# Задание 1.
# Напишите функцию to_roman, которая принимает целое число, а возвращает строку, отображающую это число римскими цифрами.
# Входные данные должны быть в диапазоне от 1 до 5000, если подается число не в этом диапазоне или не число,
# то должны выбрасываться ошибка типа NonValidInput. Этот тип ошибки вы должны создать сами. Также необходимо в папке с файлом,
# содержащей вашу функцию, создать файл tests.py, внутри которой необходимо определить тесты для вашей функции.

class NonValidInput(Exception):
    pass

def to_roman(number):
    ones_r = {'0': '', '1': 'I', '2': 'II', '3': 'III', '4': 'IV', '5': 'V', '6': 'VI', '7': 'VII', '8': 'VIII', '9': 'IX'}
    tens_r = {'0': '', '1': 'X', '2': 'XX', '3': 'XXX', '4': 'XL', '5': 'L', '6': 'LX', '7': 'LXX', '8': 'LXXX', '9': 'XC'}
    hundred_r = {'0': '', '1': 'C', '2': 'CC', '3': 'CCC', '4': 'CD', '5': 'D', '6': 'DC', '7': 'DCC', '8': 'DCCC', '9': 'CM'}
    thousand_r = {'0': '', '1': 'M', '2': 'MM', '3': 'MMM', '4': 'MMMM', '5': 'MMMMM'}
    if number in range(1,5001) and type(number) == int:
        buf_n = '0000'[len(str(number)):] + str(number)
        return thousand_r[buf_n[0]] + hundred_r[buf_n[1]] + tens_r[buf_n[2]] + ones_r[buf_n[3]]
    else:
        raise NonValidInput